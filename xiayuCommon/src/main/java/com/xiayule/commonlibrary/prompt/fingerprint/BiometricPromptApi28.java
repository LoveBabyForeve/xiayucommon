package com.xiayule.commonlibrary.prompt.fingerprint;

import android.content.Context;
import android.content.DialogInterface;
import android.graphics.Color;
import android.hardware.biometrics.BiometricPrompt;
import android.os.Build;
import android.os.CancellationSignal;
import android.security.keystore.KeyGenParameterSpec;
import android.security.keystore.KeyProperties;
import android.text.Spannable;
import android.text.SpannableStringBuilder;
import android.text.style.ForegroundColorSpan;
import android.util.Base64;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.annotation.RequiresApi;

import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.spec.ECGenParameterSpec;

/**
 * @Description: 指纹 API28
 * @Author: 下雨了
 * @CreateDate: 2020/7/9 15:40
 * @UpdateUser: 更新者
 * @UpdateDate: 2020/7/9 15:40
 * @UpdateRemark: 更新说明
 * @Version: 1.0
 */
@RequiresApi(Build.VERSION_CODES.P)
public class BiometricPromptApi28 implements IBiometricPromptImpl {

    private Context mContext;
    // 生物识别
    private BiometricPrompt mBiometricPrompt;
    // 回调信息
    private OnBiometricIdentifyCallback onBiometricIdentifyCallback;
    //  取消信号
    private CancellationSignal mCancellationSignal;

    private BiometricPromptCallbackImpl biometricPromptCallback = new BiometricPromptCallbackImpl();

    private static final String KEY_NAME = "Api28AndroidKey";
    private static final String KEYSTORE_NAME = "AndroidKeyStore";

    private Signature mSignature;
    private String mToBeSignedMessage;


    public BiometricPromptApi28(Context context) {
        this.mContext = context;

        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder("切换登录方式");
        spannableStringBuilder.setSpan(new ForegroundColorSpan(Color.parseColor("#999999")), 0, 6, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);

        mBiometricPrompt = new BiometricPrompt
                .Builder(mContext)
                .setTitle("指纹验证")
                .setDescription("开始验证")
                .setSubtitle("")
                .setNegativeButton(spannableStringBuilder, mContext.getMainExecutor(), new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        if (onBiometricIdentifyCallback != null) {
                            onBiometricIdentifyCallback.onUsePassword();
                        }
                        mCancellationSignal.cancel();
                    }
                })


                .build();


        try {
            KeyPair keyPair = generateKeyPair(KEY_NAME, true);
            // Send public key part of key pair to the server, this public key will be used for authentication
            mToBeSignedMessage = new StringBuilder()
                    .append(Base64.encodeToString(keyPair.getPublic().getEncoded(), Base64.URL_SAFE))
                    .append(":")
                    .append(KEY_NAME)
                    .append(":")
                    // Generated by the server to protect against replay attack
                    .append("12345")
                    .toString();

            mSignature = initSignature(KEY_NAME);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public void authenticate(@NonNull CancellationSignal cancel, @NonNull OnBiometricIdentifyCallback callback) {
        this.onBiometricIdentifyCallback = callback;
        this.mCancellationSignal = cancel;

        if (mCancellationSignal == null) {
            mCancellationSignal = new CancellationSignal();
        }

        mCancellationSignal.setOnCancelListener(new CancellationSignal.OnCancelListener() {
            @Override
            public void onCancel() {

            }
        });

        mBiometricPrompt.authenticate(new BiometricPrompt.CryptoObject(mSignature),
                mCancellationSignal, mContext.getMainExecutor(),
                new BiometricPromptCallbackImpl());

    }

    /**
     * 认证回调信息
     */
    private class BiometricPromptCallbackImpl extends BiometricPrompt.AuthenticationCallback {
        @Override
        public void onAuthenticationError(int errorCode, CharSequence errString) {
            super.onAuthenticationError(errorCode, errString);
            mCancellationSignal.cancel();

        }

        @Override
        public void onAuthenticationHelp(int helpCode, CharSequence helpString) {
            super.onAuthenticationHelp(helpCode, helpString);
        }

        @Override
        public void onAuthenticationSucceeded(BiometricPrompt.AuthenticationResult result) {
            super.onAuthenticationSucceeded(result);
            onBiometricIdentifyCallback.onSucceeded();
            mCancellationSignal.cancel();
        }

        @Override
        public void onAuthenticationFailed() {
            super.onAuthenticationFailed();
        }
    }


    /**
     * Generate NIST P-256 EC Key pair for signing and verification
     *
     * @param keyName
     * @param invalidatedByBiometricEnrollment
     * @return
     * @throws Exception
     */
    private KeyPair generateKeyPair(String keyName, boolean invalidatedByBiometricEnrollment) throws Exception {
        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(KeyProperties.KEY_ALGORITHM_EC, KEYSTORE_NAME);

        KeyGenParameterSpec.Builder builder = new KeyGenParameterSpec.Builder(keyName,
                KeyProperties.PURPOSE_SIGN)
                .setAlgorithmParameterSpec(new ECGenParameterSpec("secp256r1"))
                .setDigests(KeyProperties.DIGEST_SHA256,
                        KeyProperties.DIGEST_SHA384,
                        KeyProperties.DIGEST_SHA512)
                // Require the user to authenticate with a biometric to authorize every use of the key
                .setUserAuthenticationRequired(true)
                .setInvalidatedByBiometricEnrollment(invalidatedByBiometricEnrollment);

        keyPairGenerator.initialize(builder.build());

        return keyPairGenerator.generateKeyPair();
    }

    @Nullable
    private KeyPair getKeyPair(String keyName) throws Exception {
        KeyStore keyStore = KeyStore.getInstance(KEYSTORE_NAME);
        keyStore.load(null);
        if (keyStore.containsAlias(keyName)) {
            // Get public key
            PublicKey publicKey = keyStore.getCertificate(keyName).getPublicKey();
            // Get private key
            PrivateKey privateKey = (PrivateKey) keyStore.getKey(keyName, null);
            // Return a key pair
            return new KeyPair(publicKey, privateKey);
        }
        return null;
    }

    @Nullable
    private Signature initSignature(String keyName) throws Exception {
        KeyPair keyPair = getKeyPair(keyName);

        if (keyPair != null) {
            Signature signature = Signature.getInstance("SHA256withECDSA");
            signature.initSign(keyPair.getPrivate());
            return signature;
        }
        return null;
    }
    /* =============================================== 对外公开的方法 ================================================== */

}
